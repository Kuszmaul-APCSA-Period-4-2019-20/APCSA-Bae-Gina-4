Create the SubstitutableString Interface and make a reference implementation
	1. 	The prompt of this project was to find out what a reference implementation and an edge case is and to create an interface called SubstitutableString simple(String s) with the method extractFirstParen(String a) that given a string returns the earliest substring delimited by parenthesis that contain no parenthesis, and the method substituteAll(String a, String b, String c) that returns a string equal to a except that every occurrence of b is substituted for by c.
	2. 	This fulfills the specification because I created the interface SubstitutableString containing the method extractFirstParen(String a) that given a string returns the earliest substring delimited by parenthesis that contain no parenthesis, and the method substituteAll(String a, String b, String c) that returns a string equal to a except that every occurrence of b is substituted for by c. I found that an edge class is a situation that occurs only at an extreme operating parameter, and a reference implementation is the standard for all other implementations and is verified through tests (especially those for edge cases) in order for it to be trusted. I created the method main to run tests for the edge cases of both methods. For my edge case tests, I entered a null set and spaces as input (the extreme minimum), entered a series consisting of just parenthesis and a String a made entirely of instances of String b (the extreme maximum), entered an instance of the method as input for the method, entered input with no instances of parenthesis or String b present, and input with multiple instances of parentheses and String b within String a. I printed the results of each out and compared them to my expected outputs.
	3. 	All of the various tests (over 12) of my edge cases worked as expected. However, it is possible that if the input were too big, there would be some sort of error; I didn’t know how to create an input big enough without having it run infinitely, so I didn’t test that scenario as an edge case.
	4. 	The structure of my code, as aforementioned, are 3 methods (extractFirstParen(String a), substituteAll(String a, String b, String c) and main) in the interface SubstitutableString.
	5. 	One major challenge I encountered was finding the functions I had to use to make the methods. I forgot a lot of the String functions and methods, but I found that I needed contains(), replace() and indexOf() by using the Java Quick Reference. I also had trouble understanding the purpose of the extractFirstParen(String a) method. I first thought that instead of returning the substring enclosed by ‘(‘ and then ‘)’, I mistakenly believed that it was supposed to return the substring separated by either a ‘)’ or a ‘(‘. It led to me wasting a bunch of time but I managed to make the method as necessary after realizing the actual purpose.
	6.	 Mr. Kuszmaul helped me by explaining the assignment on Schoology. I used the Java Quick Reference to find String methods and functions to use, and I used the Documentation Standard file on Schoology to add in the proper documentation for my project.  
